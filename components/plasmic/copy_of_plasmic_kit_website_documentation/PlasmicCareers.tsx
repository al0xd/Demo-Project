// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vRFGcjoeyA4UNF36wYbYzx
// Component: VBSNqHRTUj4Ppa
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MainHeader from "../../MainHeader"; // plasmic-import: cY3KKnxwdgvMbc/component
import TeamMember from "../../TeamMember"; // plasmic-import: 6gtTj1hdZZcO1x/component
import MainFooter from "../../MainFooter"; // plasmic-import: _Bdn71ggiIcQEJ/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_plasmic_kit_website_documentation.module.css"; // plasmic-import: vRFGcjoeyA4UNF36wYbYzx/projectcss
import * as sty from "./PlasmicCareers.module.css"; // plasmic-import: VBSNqHRTUj4Ppa/css

export type PlasmicCareers__VariantMembers = {};

export type PlasmicCareers__VariantsArgs = {};
type VariantPropType = keyof PlasmicCareers__VariantsArgs;
export const PlasmicCareers__VariantProps = new Array<VariantPropType>();

export type PlasmicCareers__ArgsType = {};
type ArgPropType = keyof PlasmicCareers__ArgsType;
export const PlasmicCareers__ArgProps = new Array<ArgPropType>();

export type PlasmicCareers__OverridesType = {
  root?: p.Flex<"div">;
  section1?: p.Flex<"nav">;
  mainHeader?: p.Flex<typeof MainHeader>;
  section32?: p.Flex<"div">;
  whynothug?: p.Flex<"div">;
  copyBox22?: p.Flex<"div">;
  yang?: p.Flex<typeof TeamMember>;
  chungwu?: p.Flex<typeof TeamMember>;
  ydmao?: p.Flex<typeof TeamMember>;
  ray?: p.Flex<typeof TeamMember>;
  leo?: p.Flex<typeof TeamMember>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  mainFooter?: p.Flex<typeof MainFooter>;
};

export interface DefaultCareersProps {
  className?: string;
}

function PlasmicCareers__RenderFunc(props: {
  variants: PlasmicCareers__VariantsArgs;
  args: PlasmicCareers__ArgsType;
  overrides: PlasmicCareers__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <nav
        data-plasmic-name={"section1"}
        data-plasmic-override={overrides.section1}
        className={classNames(defaultcss.all, sty.section1)}
      >
        <MainHeader
          data-plasmic-name={"mainHeader"}
          data-plasmic-override={overrides.mainHeader}
          className={classNames("__wab_instance", sty.mainHeader)}
        />
      </nav>

      <div
        data-plasmic-name={"section32"}
        data-plasmic-override={overrides.section32}
        className={classNames(defaultcss.all, sty.section32)}
      >
        <div
          data-plasmic-name={"whynothug"}
          data-plasmic-override={overrides.whynothug}
          className={classNames(defaultcss.all, sty.whynothug)}
        >
          <img
            alt={""}
            className={classNames(defaultcss.img, sty.img___10Qp9)}
            role={"img"}
            src={
              "/plasmic/copy_of_plasmic_kit_website_documentation/images/section4Svg.svg"
            }
          />
        </div>

        <div
          data-plasmic-name={"copyBox22"}
          data-plasmic-override={overrides.copyBox22}
          className={classNames(defaultcss.all, sty.copyBox22)}
        >
          <div className={classNames(defaultcss.all, sty.box___6AviW)}>
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___2Sz1D
              )}
            >
              {"Join us in shaping the future of how software is created."}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__bK5BQ
              )}
            >
              {
                "We are an early stage software startup funded by NEA and other esteemed investors. We are creating a visual builder for React—something that is as easy to use as a design tool like Sketch/Figma but builds production-ready React components. Our mission is to simplify product development."
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__rdmnq
              )}
            >
              {
                "We have an intimate team of 5 from Google/Microsoft/Facebook, including tech leads, PhDs (MIT, UW), and ex-founders with exits."
              }
            </div>
          </div>

          <h2
            className={classNames(
              defaultcss.h2,
              defaultcss.__wab_text,
              sty.h2__b4IeE
            )}
          >
            {"Our team"}
          </h2>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__ymowO)}
          >
            <TeamMember
              data-plasmic-name={"yang"}
              data-plasmic-override={overrides.yang}
              name={"Yang Zhang"}
              picture={
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img___18GJ)}
                  role={"img"}
                  src={
                    "/plasmic/copy_of_plasmic_kit_website_documentation/images/yangZhang.png"
                  }
                />
              }
              title={"Co-founder"}
            />

            <TeamMember
              data-plasmic-name={"chungwu"}
              data-plasmic-override={overrides.chungwu}
              className={classNames("__wab_instance", sty.chungwu)}
              name={"Chung Wu"}
              picture={
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__wj8Zt)}
                  role={"img"}
                  src={
                    "/plasmic/copy_of_plasmic_kit_website_documentation/images/chungWu.png"
                  }
                />
              }
              title={"Co-founder"}
            />

            {false ? (
              <TeamMember
                data-plasmic-name={"ydmao"}
                data-plasmic-override={overrides.ydmao}
                className={classNames("__wab_instance", sty.ydmao)}
                name={"Yandong Mao"}
                picture={
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__hRbTd)}
                    role={"img"}
                    src={
                      "/plasmic/copy_of_plasmic_kit_website_documentation/images/yandongMao.png"
                    }
                  />
                }
                title={"Founding Engineer"}
              />
            ) : null}

            <TeamMember
              data-plasmic-name={"ray"}
              data-plasmic-override={overrides.ray}
              className={classNames("__wab_instance", sty.ray)}
              name={"Raymond Cheng"}
              picture={
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__vlMi8)}
                  role={"img"}
                  src={
                    "/plasmic/copy_of_plasmic_kit_website_documentation/images/raymondCheng.png"
                  }
                />
              }
              title={"Founding Engineer"}
            />

            <TeamMember
              data-plasmic-name={"leo"}
              data-plasmic-override={overrides.leo}
              className={classNames("__wab_instance", sty.leo)}
              hide={"ghIcon" as const}
              name={"Leo Succar-Ferré"}
              picture={
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__onbu8)}
                  role={"img"}
                  src={
                    "/plasmic/copy_of_plasmic_kit_website_documentation/images/leoSuccarFerre.jpeg"
                  }
                />
              }
              title={"Founding Designer"}
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box___9QfN4)}
          >
            <h2
              className={classNames(
                defaultcss.h2,
                defaultcss.__wab_text,
                sty.h2__oXe
              )}
            >
              {"Open role: Engineer"}
            </h2>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__tl3W
              )}
            >
              {
                "As part of the early engineering team, you would play a critical role in not just laying the foundations for the product in its formative stages, but also heavily shaping the product direction, the engineering culture, and much more."
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__nrbmc
              )}
            >
              {
                "We are generally seeking experienced (senior+) engineers, but are also open to early-career engineers with strong coding foundations. The only skill requirement is React, but background in compilers, distributed systems, or complex frontend engineering are pluses."
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__deTxj
              )}
            >
              {
                "Most importantly, we seek empathic individuals with highly productive coding foundations, who prize engineering quality, and who are curious and fast learners."
              }
            </div>

            <h3
              className={classNames(
                defaultcss.h3,
                defaultcss.__wab_text,
                sty.h3__wiweb
              )}
            >
              {"Challenges we work on"}
            </h3>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__voE2R
              )}
            >
              {
                "For us, Plasmic is an immensely fun and exciting product to build! Here is just a smattering of the challenges we’re working on:"
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__me8Bt
              )}
            >
              {"Building a robust visual builder."}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___51DLi
              )}
            >
              {
                "Not only do we need to build a performant, robust, and easy-to-use design tool on the web—we need to go far beyond this to allow expressing all the nuances of production components, in all of their complexity. The core editor in Plasmic Studio is a sprawling application with complex state to manage and many rich interactions—unique compared to many conventional content- or form-centric web applications."
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__vhgtv
              )}
            >
              {"Streamlining layout controls."}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__hhhei
              )}
            >
              {
                "Layout is a pervasive aspect of building UIs, and we have powerful primitives in tools like CSS. But CSS is notoriously full of pitfalls, with many similar ways of accomplishing the same thing with subtle trade-offs among them. How do we unify and distill these tools into a simplified, streamlined set of concepts?"
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__ijQcb
              )}
            >
              {"Translating free-form vector graphics."}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__pW7Q
              )}
            >
              {
                "Traditional design tools are where many designs start today, and developers are responsible for translating these designs to code. But something like Figma’s document representation has significant impedance mismatch with platforms that developers target. How do we automate as much as we can of the (highly rote) work of translating to code?"
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__re9Jh
              )}
            >
              {"Integrating code components. "}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__vkrg4
              )}
            >
              {
                "Making Plasmic usable in development teams requires the ability to work with the existing design system and component libraries that the team is already using. Code components is about letting you directly use arbitrary React components from within Plasmic Studio. This involves heavy work in language tooling, code analysis, secure/isolated code loading, and much more."
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__n4P7A
              )}
            >
              {"Providing guidance on accessibility."}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__ivFq2
              )}
            >
              {
                "Accessibility is key to ensuring we build high-quality and inclusive products for everyone. How do we not only enable but guide developers and designers on accessibility considerations and best practices?"
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__aa5Xn
              )}
            >
              {"And more"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__ysYVt
              )}
            >
              {
                "Support for other web frameworks, support for mobile, refining our codegen, adding transitions and animations, and much, much more!"
              }
            </div>

            <h3
              className={classNames(
                defaultcss.h3,
                defaultcss.__wab_text,
                sty.h3__vhU7K
              )}
            >
              {"How to apply"}
            </h3>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__dGqWk
              )}
            >
              {
                "If this role sounds like a fit, or if you have questions about the opportunity, we would love to hear from you!"
              }
            </div>

            <div className={classNames(defaultcss.all, sty.box___1T1Hs)}>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__ocfdI
                )}
              >
                {"Send your CV to: "}
              </div>

              <p.PlasmicLink
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(defaultcss.all, sty.link)}
                component={Link}
                href={"mailto:hiring@plasmic.app" as const}
                platform={"nextjs"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__slyta
                  )}
                >
                  {"hiring@plasmic.app"}
                </div>
              </p.PlasmicLink>
            </div>
          </p.Stack>
        </div>
      </div>

      <MainFooter
        data-plasmic-name={"mainFooter"}
        data-plasmic-override={overrides.mainFooter}
        className={classNames("__wab_instance", sty.mainFooter)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section1",
    "mainHeader",
    "section32",
    "whynothug",
    "copyBox22",
    "yang",
    "chungwu",
    "ydmao",
    "ray",
    "leo",
    "link",
    "mainFooter"
  ],
  section1: ["section1", "mainHeader"],
  mainHeader: ["mainHeader"],
  section32: [
    "section32",
    "whynothug",
    "copyBox22",
    "yang",
    "chungwu",
    "ydmao",
    "ray",
    "leo",
    "link"
  ],
  whynothug: ["whynothug"],
  copyBox22: ["copyBox22", "yang", "chungwu", "ydmao", "ray", "leo", "link"],
  yang: ["yang"],
  chungwu: ["chungwu"],
  ydmao: ["ydmao"],
  ray: ["ray"],
  leo: ["leo"],
  link: ["link"],
  mainFooter: ["mainFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  section1: "nav";
  mainHeader: typeof MainHeader;
  section32: "div";
  whynothug: "div";
  copyBox22: "div";
  yang: typeof TeamMember;
  chungwu: typeof TeamMember;
  ydmao: typeof TeamMember;
  ray: typeof TeamMember;
  leo: typeof TeamMember;
  link: "a";
  mainFooter: typeof MainFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCareers__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicCareers__VariantsArgs;
  args?: PlasmicCareers__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicCareers__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicCareers__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCareers__ArgProps,
      internalVariantPropNames: PlasmicCareers__VariantProps
    });

    return PlasmicCareers__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCareers";
  } else {
    func.displayName = `PlasmicCareers.${nodeName}`;
  }
  return func;
}

export const PlasmicCareers = Object.assign(
  // Top-level PlasmicCareers renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section1: makeNodeComponent("section1"),
    mainHeader: makeNodeComponent("mainHeader"),
    section32: makeNodeComponent("section32"),
    whynothug: makeNodeComponent("whynothug"),
    copyBox22: makeNodeComponent("copyBox22"),
    yang: makeNodeComponent("yang"),
    chungwu: makeNodeComponent("chungwu"),
    ydmao: makeNodeComponent("ydmao"),
    ray: makeNodeComponent("ray"),
    leo: makeNodeComponent("leo"),
    link: makeNodeComponent("link"),
    mainFooter: makeNodeComponent("mainFooter"),

    // Metadata about props expected for PlasmicCareers
    internalVariantProps: PlasmicCareers__VariantProps,
    internalArgProps: PlasmicCareers__ArgProps
  }
);

export default PlasmicCareers;
/* prettier-ignore-end */
