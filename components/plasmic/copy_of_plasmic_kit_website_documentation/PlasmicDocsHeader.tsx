// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vRFGcjoeyA4UNF36wYbYzx
// Component: grZ4474C0u2vS
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_plasmic_kit_website_documentation.module.css"; // plasmic-import: vRFGcjoeyA4UNF36wYbYzx/projectcss
import * as sty from "./PlasmicDocsHeader.module.css"; // plasmic-import: grZ4474C0u2vS/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: bCK8I3kTbJKrnP/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: FdHRaXukHVpLoX/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: d4H8RVJ74qak0V/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: XXTmzgdchKWWpp/icon

export type PlasmicDocsHeader__VariantMembers = {
  mode: "searchOnly";
};

export type PlasmicDocsHeader__VariantsArgs = {
  mode?: SingleChoiceArg<"searchOnly">;
};

type VariantPropType = keyof PlasmicDocsHeader__VariantsArgs;
export const PlasmicDocsHeader__VariantProps = new Array<VariantPropType>(
  "mode"
);

export type PlasmicDocsHeader__ArgsType = {};
type ArgPropType = keyof PlasmicDocsHeader__ArgsType;
export const PlasmicDocsHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicDocsHeader__OverridesType = {
  section1?: p.Flex<"section">;
  container?: p.Flex<"div">;
  searchContainer?: p.Flex<"div">;
  textbox?: p.Flex<"input">;
  inputSearchIcon?: p.Flex<"div">;
  searchButton?: p.Flex<"button">;
};

export interface DefaultDocsHeaderProps {
  mode?: SingleChoiceArg<"searchOnly">;
  className?: string;
}

function PlasmicDocsHeader__RenderFunc(props: {
  variants: PlasmicDocsHeader__VariantsArgs;
  args: PlasmicDocsHeader__ArgsType;
  overrides: PlasmicDocsHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <section
      data-plasmic-name={"section1"}
      data-plasmic-override={overrides.section1}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.section1
      )}
    >
      <div
        data-plasmic-name={"container"}
        data-plasmic-override={overrides.container}
        className={classNames(defaultcss.all, sty.container, {
          [sty.container__mode_searchOnly]: hasVariant(
            variants,
            "mode",
            "searchOnly"
          )
        })}
      >
        {(hasVariant(variants, "mode", "searchOnly") ? false : true) ? (
          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(defaultcss.all, sty.link___1Ttni, {
              [sty.link__mode_searchOnly___1TtnIsgvTb]: hasVariant(
                variants,
                "mode",
                "searchOnly"
              )
            })}
            component={Link}
            href={"/learn" as const}
            platform={"nextjs"}
          >
            <IconIcon
              className={classNames(defaultcss.all, sty.svg__wrGbq)}
              role={"img"}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__yRls,
                {
                  [sty.box__mode_searchOnly__yRlSsgvTb]: hasVariant(
                    variants,
                    "mode",
                    "searchOnly"
                  )
                }
              )}
            >
              {"Learn Plasmic"}
            </div>
          </p.Stack>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__zjPrW, {
            [sty.box__mode_searchOnly__zjPrWsgvTb]: hasVariant(
              variants,
              "mode",
              "searchOnly"
            )
          })}
        >
          <div
            data-plasmic-name={"searchContainer"}
            data-plasmic-override={overrides.searchContainer}
            className={classNames(defaultcss.all, sty.searchContainer)}
          >
            <input
              data-plasmic-name={"textbox"}
              data-plasmic-override={overrides.textbox}
              className={classNames(defaultcss.input, sty.textbox, {
                [sty.textbox__mode_searchOnly]: hasVariant(
                  variants,
                  "mode",
                  "searchOnly"
                )
              })}
              placeholder={"Search" as const}
              size={1 as const}
              type={"text" as const}
            />

            <div
              data-plasmic-name={"inputSearchIcon"}
              data-plasmic-override={overrides.inputSearchIcon}
              className={classNames(defaultcss.all, sty.inputSearchIcon)}
            >
              {(hasVariant(variants, "mode", "searchOnly") ? false : true) ? (
                <Icon7Icon
                  className={classNames(defaultcss.all, sty.svg___8OMy9, {
                    [sty.svg__mode_searchOnly___8OMy9SgvTb]: hasVariant(
                      variants,
                      "mode",
                      "searchOnly"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
              {(hasVariant(variants, "mode", "searchOnly") ? true : false) ? (
                <Icon8Icon
                  className={classNames(defaultcss.all, sty.svg__kzHeS, {
                    [sty.svg__mode_searchOnly__kzHeSsgvTb]: hasVariant(
                      variants,
                      "mode",
                      "searchOnly"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </div>
          </div>

          {(hasVariant(variants, "mode", "searchOnly") ? false : true) ? (
            <button
              data-plasmic-name={"searchButton"}
              data-plasmic-override={overrides.searchButton}
              className={classNames(defaultcss.button, sty.searchButton, {
                [sty.searchButton__mode_searchOnly]: hasVariant(
                  variants,
                  "mode",
                  "searchOnly"
                )
              })}
            >
              <Icon7Icon
                className={classNames(defaultcss.all, sty.svg__dPbqD, {
                  [sty.svg__mode_searchOnly__dPbqDsgvTb]: hasVariant(
                    variants,
                    "mode",
                    "searchOnly"
                  )
                })}
                role={"img"}
              />
            </button>
          ) : null}
          {(hasVariant(variants, "mode", "searchOnly") ? false : true) ? (
            <p.PlasmicLink
              className={classNames(defaultcss.all, sty.link__ztM8Q, {
                [sty.link__mode_searchOnly__ztM8QsgvTb]: hasVariant(
                  variants,
                  "mode",
                  "searchOnly"
                )
              })}
              component={Link}
              href={"https://twitter.com/plasmicapp" as const}
              platform={"nextjs"}
            >
              <Icon6Icon
                className={classNames(defaultcss.all, sty.svg__pqEk)}
                role={"img"}
              />
            </p.PlasmicLink>
          ) : null}
          {(hasVariant(variants, "mode", "searchOnly") ? false : true) ? (
            <p.PlasmicLink
              className={classNames(defaultcss.all, sty.link__dYg54, {
                [sty.link__mode_searchOnly__dYg54SgvTb]: hasVariant(
                  variants,
                  "mode",
                  "searchOnly"
                )
              })}
              component={Link}
              href={"https://studio.plasmic.app" as const}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__yxHq2
                )}
              >
                {"Login"}
              </div>
            </p.PlasmicLink>
          ) : null}
        </p.Stack>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  section1: [
    "section1",
    "container",
    "searchContainer",
    "textbox",
    "inputSearchIcon",
    "searchButton"
  ],
  container: [
    "container",
    "searchContainer",
    "textbox",
    "inputSearchIcon",
    "searchButton"
  ],
  searchContainer: ["searchContainer", "textbox", "inputSearchIcon"],
  textbox: ["textbox"],
  inputSearchIcon: ["inputSearchIcon"],
  searchButton: ["searchButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  section1: "section";
  container: "div";
  searchContainer: "div";
  textbox: "input";
  inputSearchIcon: "div";
  searchButton: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDocsHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicDocsHeader__VariantsArgs;
  args?: PlasmicDocsHeader__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicDocsHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicDocsHeader__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDocsHeader__ArgProps,
      internalVariantPropNames: PlasmicDocsHeader__VariantProps
    });

    return PlasmicDocsHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "section1") {
    func.displayName = "PlasmicDocsHeader";
  } else {
    func.displayName = `PlasmicDocsHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicDocsHeader = Object.assign(
  // Top-level PlasmicDocsHeader renders the root element
  makeNodeComponent("section1"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    searchContainer: makeNodeComponent("searchContainer"),
    textbox: makeNodeComponent("textbox"),
    inputSearchIcon: makeNodeComponent("inputSearchIcon"),
    searchButton: makeNodeComponent("searchButton"),

    // Metadata about props expected for PlasmicDocsHeader
    internalVariantProps: PlasmicDocsHeader__VariantProps,
    internalArgProps: PlasmicDocsHeader__ArgProps
  }
);

export default PlasmicDocsHeader;
/* prettier-ignore-end */
