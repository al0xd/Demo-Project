// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vRFGcjoeyA4UNF36wYbYzx
// Component: mp_w-V5o_HKs4
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Box1 from "../../Box1"; // plasmic-import: raDrVBBK3Owew/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_plasmic_kit_website_documentation.module.css"; // plasmic-import: vRFGcjoeyA4UNF36wYbYzx/projectcss
import * as sty from "./PlasmicBox2.module.css"; // plasmic-import: mp_w-V5o_HKs4/css

export type PlasmicBox2__VariantMembers = {};

export type PlasmicBox2__VariantsArgs = {};
type VariantPropType = keyof PlasmicBox2__VariantsArgs;
export const PlasmicBox2__VariantProps = new Array<VariantPropType>();

export type PlasmicBox2__ArgsType = {};
type ArgPropType = keyof PlasmicBox2__ArgsType;
export const PlasmicBox2__ArgProps = new Array<ArgPropType>();

export type PlasmicBox2__OverridesType = {
  root?: p.Flex<"div">;
  box1?: p.Flex<typeof Box1>;
};

export interface DefaultBox2Props {
  className?: string;
}

function PlasmicBox2__RenderFunc(props: {
  variants: PlasmicBox2__VariantsArgs;
  args: PlasmicBox2__ArgsType;
  overrides: PlasmicBox2__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Box1
        data-plasmic-name={"box1"}
        data-plasmic-override={overrides.box1}
        className={classNames("__wab_instance", sty.box1)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "box1"],
  box1: ["box1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  box1: typeof Box1;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBox2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicBox2__VariantsArgs;
  args?: PlasmicBox2__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicBox2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicBox2__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBox2__ArgProps,
      internalVariantPropNames: PlasmicBox2__VariantProps
    });

    return PlasmicBox2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBox2";
  } else {
    func.displayName = `PlasmicBox2.${nodeName}`;
  }
  return func;
}

export const PlasmicBox2 = Object.assign(
  // Top-level PlasmicBox2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box1: makeNodeComponent("box1"),

    // Metadata about props expected for PlasmicBox2
    internalVariantProps: PlasmicBox2__VariantProps,
    internalArgProps: PlasmicBox2__ArgProps
  }
);

export default PlasmicBox2;
/* prettier-ignore-end */
