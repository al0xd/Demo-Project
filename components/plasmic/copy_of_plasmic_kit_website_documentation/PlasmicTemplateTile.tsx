// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vRFGcjoeyA4UNF36wYbYzx
// Component: TSGvnOEFxSlgUC
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_plasmic_kit_website_documentation.module.css"; // plasmic-import: vRFGcjoeyA4UNF36wYbYzx/projectcss
import * as sty from "./PlasmicTemplateTile.module.css"; // plasmic-import: TSGvnOEFxSlgUC/css

import Check2Icon from "./icons/PlasmicIcon__Check2"; // plasmic-import: Sd2-pTAvnwkFbk/icon

export type PlasmicTemplateTile__VariantMembers = {
  type: "first" | "second" | "third";
  icon: "withIcon";
  image: "withImage";
};

export type PlasmicTemplateTile__VariantsArgs = {
  type?: SingleChoiceArg<"first" | "second" | "third">;
  icon?: SingleChoiceArg<"withIcon">;
  image?: SingleChoiceArg<"withImage">;
};

type VariantPropType = keyof PlasmicTemplateTile__VariantsArgs;
export const PlasmicTemplateTile__VariantProps = new Array<VariantPropType>(
  "type",
  "icon",
  "image"
);

export type PlasmicTemplateTile__ArgsType = {
  instruction?: React.ReactNode;
  name?: React.ReactNode;
  children?: React.ReactNode;
  preview?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTemplateTile__ArgsType;
export const PlasmicTemplateTile__ArgProps = new Array<ArgPropType>(
  "instruction",
  "name",
  "children",
  "preview"
);

export type PlasmicTemplateTile__OverridesType = {
  root?: p.Flex<"div">;
  tile?: p.Flex<"button">;
  img?: p.Flex<"img">;
  divider?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  frame317?: p.Flex<"div">;
  frame308?: p.Flex<"div">;
  bordersoutlinesstrokesPlaceholder?: p.Flex<"div">;
  plasmicLink?: p.Flex<"a"> & Partial<LinkProps>;
  starterCode?: p.Flex<"a"> & Partial<LinkProps>;
  previewLink?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultTemplateTileProps {
  instruction?: React.ReactNode;
  name?: React.ReactNode;
  children?: React.ReactNode;
  preview?: React.ReactNode;
  type?: SingleChoiceArg<"first" | "second" | "third">;
  icon?: SingleChoiceArg<"withIcon">;
  image?: SingleChoiceArg<"withImage">;
  className?: string;
}

function PlasmicTemplateTile__RenderFunc(props: {
  variants: PlasmicTemplateTile__VariantsArgs;
  args: PlasmicTemplateTile__ArgsType;
  overrides: PlasmicTemplateTile__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__icon_withIcon]: hasVariant(variants, "icon", "withIcon"),
        [sty.root__image_withImage]: hasVariant(variants, "image", "withImage"),
        [sty.root__type_first]: hasVariant(variants, "type", "first"),
        [sty.root__type_second]: hasVariant(variants, "type", "second"),
        [sty.root__type_third]: hasVariant(variants, "type", "third")
      })}
    >
      <button
        data-plasmic-name={"tile"}
        data-plasmic-override={overrides.tile}
        className={classNames(defaultcss.button, sty.tile, {
          [sty.tile__icon_withIcon]: hasVariant(variants, "icon", "withIcon"),
          [sty.tile__image_withImage]: hasVariant(
            variants,
            "image",
            "withImage"
          ),
          [sty.tile__type_first]: hasVariant(variants, "type", "first"),
          [sty.tile__type_second]: hasVariant(variants, "type", "second"),
          [sty.tile__type_third]: hasVariant(variants, "type", "third")
        })}
      >
        {(hasVariant(variants, "image", "withImage") ? true : false) ? (
          <div
            className={classNames(defaultcss.all, sty.box__dSnmj, {
              [sty.box__image_withImage__dSnmj2GpO]: hasVariant(
                variants,
                "image",
                "withImage"
              )
            })}
          >
            <p.PlasmicSlot
              defaultContents={
                <img
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(defaultcss.img, sty.img)}
                  role={"img"}
                  src={
                    "/plasmic/copy_of_plasmic_kit_website_documentation/images/screenShot20200616At35454PMpng.png"
                  }
                />
              }
              value={args.preview}
            />
          </div>
        ) : null}

        <div
          className={classNames(defaultcss.all, sty.box__u3RiL, {
            [sty.box__icon_withIcon__u3RiL8Oc5J]: hasVariant(
              variants,
              "icon",
              "withIcon"
            ),
            [sty.box__image_withImage__u3RiL2GpO]: hasVariant(
              variants,
              "image",
              "withImage"
            ),
            [sty.box__type_first__u3RiL1W71]: hasVariant(
              variants,
              "type",
              "first"
            ),
            [sty.box__type_second__u3RiLyc43O]: hasVariant(
              variants,
              "type",
              "second"
            ),
            [sty.box__type_third__u3RiLPw5J]: hasVariant(
              variants,
              "type",
              "third"
            )
          })}
        >
          {(hasVariant(variants, "image", "withImage") ? true : false) ? (
            <div
              data-plasmic-name={"divider"}
              data-plasmic-override={overrides.divider}
              className={classNames(defaultcss.all, sty.divider, {
                [sty.divider__icon_withIcon]: hasVariant(
                  variants,
                  "icon",
                  "withIcon"
                ),
                [sty.divider__image_withImage]: hasVariant(
                  variants,
                  "image",
                  "withImage"
                ),
                [sty.divider__type_first]: hasVariant(
                  variants,
                  "type",
                  "first"
                ),
                [sty.divider__type_second]: hasVariant(
                  variants,
                  "type",
                  "second"
                ),
                [sty.divider__type_third]: hasVariant(variants, "type", "third")
              })}
            />
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__atrV, {
              [sty.box__icon_withIcon__atrV8Oc5J]: hasVariant(
                variants,
                "icon",
                "withIcon"
              ),
              [sty.box__image_withImage__atrV2GpO]: hasVariant(
                variants,
                "image",
                "withImage"
              ),
              [sty.box__type_first__atrV1W71]: hasVariant(
                variants,
                "type",
                "first"
              ),
              [sty.box__type_second__atrVyc43O]: hasVariant(
                variants,
                "type",
                "second"
              ),
              [sty.box__type_third__atrVPw5J]: hasVariant(
                variants,
                "type",
                "third"
              )
            })}
          >
            {(hasVariant(variants, "icon", "withIcon") ? true : false) ? (
              <p.PlasmicSlot
                defaultContents={
                  <Check2Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(defaultcss.all, sty.svg)}
                    role={"img"}
                  />
                }
                value={args.children}
              />
            ) : null}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__bEgla, {
                [sty.box__icon_withIcon__bEgla8Oc5J]: hasVariant(
                  variants,
                  "icon",
                  "withIcon"
                ),
                [sty.box__image_withImage__bEgla2GpO]: hasVariant(
                  variants,
                  "image",
                  "withImage"
                ),
                [sty.box__type_first__bEgla1W71]: hasVariant(
                  variants,
                  "type",
                  "first"
                ),
                [sty.box__type_second__bEglAyc43O]: hasVariant(
                  variants,
                  "type",
                  "second"
                ),
                [sty.box__type_third__bEglaPw5J]: hasVariant(
                  variants,
                  "type",
                  "third"
                )
              })}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame317"}
                data-plasmic-override={overrides.frame317}
                hasGap={true}
                className={classNames(defaultcss.all, sty.frame317, {
                  [sty.frame317__icon_withIcon]: hasVariant(
                    variants,
                    "icon",
                    "withIcon"
                  ),
                  [sty.frame317__image_withImage]: hasVariant(
                    variants,
                    "image",
                    "withImage"
                  ),
                  [sty.frame317__type_first]: hasVariant(
                    variants,
                    "type",
                    "first"
                  ),
                  [sty.frame317__type_second]: hasVariant(
                    variants,
                    "type",
                    "second"
                  ),
                  [sty.frame317__type_third]: hasVariant(
                    variants,
                    "type",
                    "third"
                  )
                })}
              >
                <p.PlasmicSlot
                  defaultContents={"3-Minute Codegen Quickstart"}
                  value={args.name}
                  className={classNames(sty.slotName, {
                    [sty.slotName__icon_withIcon]: hasVariant(
                      variants,
                      "icon",
                      "withIcon"
                    ),
                    [sty.slotName__image_withImage]: hasVariant(
                      variants,
                      "image",
                      "withImage"
                    ),
                    [sty.slotName__type_first]: hasVariant(
                      variants,
                      "type",
                      "first"
                    ),
                    [sty.slotName__type_second]: hasVariant(
                      variants,
                      "type",
                      "second"
                    ),
                    [sty.slotName__type_third]: hasVariant(
                      variants,
                      "type",
                      "third"
                    )
                  })}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame308"}
                data-plasmic-override={overrides.frame308}
                hasGap={true}
                className={classNames(defaultcss.all, sty.frame308, {
                  [sty.frame308__image_withImage]: hasVariant(
                    variants,
                    "image",
                    "withImage"
                  ),
                  [sty.frame308__type_first]: hasVariant(
                    variants,
                    "type",
                    "first"
                  ),
                  [sty.frame308__type_second]: hasVariant(
                    variants,
                    "type",
                    "second"
                  ),
                  [sty.frame308__type_third]: hasVariant(
                    variants,
                    "type",
                    "third"
                  )
                })}
              >
                <p.PlasmicSlot
                  defaultContents={
                    "Strongly recommended! Plasmic's power lies in its more advanced concepts."
                  }
                  value={args.instruction}
                  className={classNames(sty.slotInstruction, {
                    [sty.slotInstruction__icon_withIcon]: hasVariant(
                      variants,
                      "icon",
                      "withIcon"
                    ),
                    [sty.slotInstruction__image_withImage]: hasVariant(
                      variants,
                      "image",
                      "withImage"
                    ),
                    [sty.slotInstruction__type_first]: hasVariant(
                      variants,
                      "type",
                      "first"
                    ),
                    [sty.slotInstruction__type_second]: hasVariant(
                      variants,
                      "type",
                      "second"
                    ),
                    [sty.slotInstruction__type_third]: hasVariant(
                      variants,
                      "type",
                      "third"
                    )
                  })}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>

        <div
          data-plasmic-name={"bordersoutlinesstrokesPlaceholder"}
          data-plasmic-override={overrides.bordersoutlinesstrokesPlaceholder}
          className={classNames(
            defaultcss.all,
            sty.bordersoutlinesstrokesPlaceholder,
            {
              [sty.bordersoutlinesstrokesPlaceholder__icon_withIcon]: hasVariant(
                variants,
                "icon",
                "withIcon"
              ),
              [sty.bordersoutlinesstrokesPlaceholder__image_withImage]: hasVariant(
                variants,
                "image",
                "withImage"
              ),
              [sty.bordersoutlinesstrokesPlaceholder__type_first]: hasVariant(
                variants,
                "type",
                "first"
              ),
              [sty.bordersoutlinesstrokesPlaceholder__type_second]: hasVariant(
                variants,
                "type",
                "second"
              ),
              [sty.bordersoutlinesstrokesPlaceholder__type_third]: hasVariant(
                variants,
                "type",
                "third"
              )
            }
          )}
        />
      </button>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__g46K)}
      >
        <p.PlasmicLink
          data-plasmic-name={"plasmicLink"}
          data-plasmic-override={overrides.plasmicLink}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.plasmicLink
          )}
          component={Link}
          href={"https://www.plasmic.app/" as const}
          platform={"nextjs"}
        >
          {"Plasmic project"}
        </p.PlasmicLink>

        <p.PlasmicLink
          data-plasmic-name={"starterCode"}
          data-plasmic-override={overrides.starterCode}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.starterCode
          )}
          component={Link}
          href={"https://www.plasmic.app/" as const}
          platform={"nextjs"}
        >
          {"Starter Code"}
        </p.PlasmicLink>

        <p.PlasmicLink
          data-plasmic-name={"previewLink"}
          data-plasmic-override={overrides.previewLink}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.previewLink
          )}
          component={Link}
          href={"https://www.plasmic.app/" as const}
          platform={"nextjs"}
        >
          {"Preview"}
        </p.PlasmicLink>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "tile",
    "img",
    "divider",
    "svg",
    "frame317",
    "frame308",
    "bordersoutlinesstrokesPlaceholder",
    "plasmicLink",
    "starterCode",
    "previewLink"
  ],
  tile: [
    "tile",
    "img",
    "divider",
    "svg",
    "frame317",
    "frame308",
    "bordersoutlinesstrokesPlaceholder"
  ],
  img: ["img"],
  divider: ["divider"],
  svg: ["svg"],
  frame317: ["frame317"],
  frame308: ["frame308"],
  bordersoutlinesstrokesPlaceholder: ["bordersoutlinesstrokesPlaceholder"],
  plasmicLink: ["plasmicLink"],
  starterCode: ["starterCode"],
  previewLink: ["previewLink"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  tile: "button";
  img: "img";
  divider: "div";
  svg: "svg";
  frame317: "div";
  frame308: "div";
  bordersoutlinesstrokesPlaceholder: "div";
  plasmicLink: "a";
  starterCode: "a";
  previewLink: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTemplateTile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicTemplateTile__VariantsArgs;
  args?: PlasmicTemplateTile__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicTemplateTile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicTemplateTile__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTemplateTile__ArgProps,
      internalVariantPropNames: PlasmicTemplateTile__VariantProps
    });

    return PlasmicTemplateTile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTemplateTile";
  } else {
    func.displayName = `PlasmicTemplateTile.${nodeName}`;
  }
  return func;
}

export const PlasmicTemplateTile = Object.assign(
  // Top-level PlasmicTemplateTile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tile: makeNodeComponent("tile"),
    img: makeNodeComponent("img"),
    divider: makeNodeComponent("divider"),
    svg: makeNodeComponent("svg"),
    frame317: makeNodeComponent("frame317"),
    frame308: makeNodeComponent("frame308"),
    bordersoutlinesstrokesPlaceholder: makeNodeComponent(
      "bordersoutlinesstrokesPlaceholder"
    ),
    plasmicLink: makeNodeComponent("plasmicLink"),
    starterCode: makeNodeComponent("starterCode"),
    previewLink: makeNodeComponent("previewLink"),

    // Metadata about props expected for PlasmicTemplateTile
    internalVariantProps: PlasmicTemplateTile__VariantProps,
    internalArgProps: PlasmicTemplateTile__ArgProps
  }
);

export default PlasmicTemplateTile;
/* prettier-ignore-end */
