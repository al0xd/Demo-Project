// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vRFGcjoeyA4UNF36wYbYzx
// Component: yeYgVamDDvBQSU
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TeamMember from "../../TeamMember"; // plasmic-import: 6gtTj1hdZZcO1x/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_plasmic_kit_website_documentation.module.css"; // plasmic-import: vRFGcjoeyA4UNF36wYbYzx/projectcss
import * as sty from "./PlasmicAboutUs.module.css"; // plasmic-import: yeYgVamDDvBQSU/css

export type PlasmicAboutUs__VariantMembers = {};

export type PlasmicAboutUs__VariantsArgs = {};
type VariantPropType = keyof PlasmicAboutUs__VariantsArgs;
export const PlasmicAboutUs__VariantProps = new Array<VariantPropType>();

export type PlasmicAboutUs__ArgsType = {};
type ArgPropType = keyof PlasmicAboutUs__ArgsType;
export const PlasmicAboutUs__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutUs__OverridesType = {
  section32?: p.Flex<"div">;
  copyBox22?: p.Flex<"div">;
};

export interface DefaultAboutUsProps {
  className?: string;
}

function PlasmicAboutUs__RenderFunc(props: {
  variants: PlasmicAboutUs__VariantsArgs;
  args: PlasmicAboutUs__ArgsType;
  overrides: PlasmicAboutUs__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"section32"}
      data-plasmic-override={overrides.section32}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.section32
      )}
    >
      <img
        alt={""}
        className={classNames(defaultcss.img, sty.img__dzVbw)}
        role={"img"}
        src={
          "/plasmic/copy_of_plasmic_kit_website_documentation/images/section4Svg.svg"
        }
      />

      <div
        data-plasmic-name={"copyBox22"}
        data-plasmic-override={overrides.copyBox22}
        className={classNames(defaultcss.all, sty.copyBox22)}
      >
        <div className={classNames(defaultcss.all, sty.box__iHjFy)}>
          <h1
            className={classNames(
              defaultcss.h1,
              defaultcss.__wab_text,
              sty.h1__yBiVw
            )}
          >
            {"About us"}
          </h1>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__wBtYd
            )}
          >
            {
              "We are an early stage software startup funded by NEA and other esteemed investors. We are creating a visual builder for React—something that is as easy to use as a design tool like Sketch/Figma but builds production-ready React components. Our mission is to simplify product development."
            }
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__lqZQg
            )}
          >
            {
              "We have an intimate team of 5 from Google/Microsoft/Facebook, including tech leads, PhDs (MIT, UW), and ex-founders."
            }
          </div>
        </div>

        <h1
          className={classNames(
            defaultcss.h1,
            defaultcss.__wab_text,
            sty.h1__c6YkF
          )}
        >
          {"Our team"}
        </h1>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__g21Sc)}
        >
          <TeamMember
            picture={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img___9I9Wl)}
                role={"img"}
                src={
                  "/plasmic/copy_of_plasmic_kit_website_documentation/images/yangZhang.png"
                }
              />
            }
          />

          <TeamMember
            className={classNames("__wab_instance", sty.teamMember___42YEl)}
            name={"Chung Wu"}
            picture={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img___4Rvh6)}
                role={"img"}
                src={
                  "/plasmic/copy_of_plasmic_kit_website_documentation/images/chungWu.png"
                }
              />
            }
          />

          <TeamMember
            className={classNames("__wab_instance", sty.teamMember__sXxxR)}
            name={"Raymond Cheng"}
            picture={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__lU0Yf)}
                role={"img"}
                src={
                  "/plasmic/copy_of_plasmic_kit_website_documentation/images/raymondCheng.png"
                }
              />
            }
            title={"Founding Engineer"}
          />

          <TeamMember
            className={classNames("__wab_instance", sty.teamMember__j2Ryx)}
            hide={"ghIcon" as const}
            name={"Leo Succar-Ferré"}
            picture={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__p7Xk3)}
                role={"img"}
                src={
                  "https://media-exp1.licdn.com/dms/image/C5603AQEJF4s1OiKyZw/profile-displayphoto-shrink_800_800/0?e=1605139200&v=beta&t=j-BGnmTV7RF9H2CM3l6H4B4YcZszTzEWYzbmEY-xTzs" as const
                }
              />
            }
            title={"Founding Designer"}
          />
        </p.Stack>

        <div className={classNames(defaultcss.all, sty.box__vikiF)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__hPLxp)}
          >
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img___0Sd7Y)}
              role={"img"}
              src={
                "/plasmic/copy_of_plasmic_kit_website_documentation/images/image9.svg"
              }
            />

            <h1
              className={classNames(
                defaultcss.h1,
                defaultcss.__wab_text,
                sty.h1__lGxdZ
              )}
            >
              {"We're hiring!"}
            </h1>
          </p.Stack>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__lwUlI
            )}
          >
            {
              "We're looking for another engineer to join the core team. The only skill requirement is React, but generally we are seeking experienced (senior+/tech lead) engineers. Background in compilers, distributed systems, frontend, or Typescript are pluses!"
            }
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__dds5M
            )}
          >
            {
              "If you're interested, please let us know - we would love to hear from you!"
            }
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__vJvEo)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__gBmT
              )}
            >
              {"Apply:"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__oBdGy
              )}
            >
              {"hiring@plasmic.app"}
            </div>
          </p.Stack>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  section32: ["section32", "copyBox22"],
  copyBox22: ["copyBox22"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  section32: "div";
  copyBox22: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutUs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicAboutUs__VariantsArgs;
  args?: PlasmicAboutUs__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicAboutUs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicAboutUs__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAboutUs__ArgProps,
      internalVariantPropNames: PlasmicAboutUs__VariantProps
    });

    return PlasmicAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "section32") {
    func.displayName = "PlasmicAboutUs";
  } else {
    func.displayName = `PlasmicAboutUs.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutUs = Object.assign(
  // Top-level PlasmicAboutUs renders the root element
  makeNodeComponent("section32"),
  {
    // Helper components rendering sub-elements
    copyBox22: makeNodeComponent("copyBox22"),

    // Metadata about props expected for PlasmicAboutUs
    internalVariantProps: PlasmicAboutUs__VariantProps,
    internalArgProps: PlasmicAboutUs__ArgProps
  }
);

export default PlasmicAboutUs;
/* prettier-ignore-end */
